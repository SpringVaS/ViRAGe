## External executables

isabelle_bin=isabelle

gcc_bin=gcc

swipl_bin=swipl
value_for_ld_preload=

scala_compiler=scalac


## System settings
#verbosity_level


## Isabelle settings

# Isabelle tactics to be used by the brute force tactics choice (;-separated list).
isabelle_tactics=simp;blast;metis;fastforce

path_to_root_file=src/test/resources/verifiedVotingRuleConstruction/theories
session_name=Verified_Voting_Rule_Construction
#default_path_for_generated_theories=


## Voting-specific settings

# Type synonyms defined in Isabelle (;-separated list of signature->abbreviation pairs)
type_synonyms=Set.set(Product_Type.prod(?\'a)(?\'a))->Preference_Relation;List.list(Preference_Relation)->Profile;Product_Type.prod(Set.set(?\'a))(Product_Type.prod(Set.set(?\'a))(Set.set(?\'a)))->Result;fun(Set.set(?\'a))(fun(Profile)(Result))->Electoral_Module;fun(Set.set(?\'a))(fun(Result)(fun(Result)(Result)))->Aggregator;fun(?\'a)(fun(Set.set(?\'a))(fun(Profile)(Nat.nat)))->Evaluation_Function;fun(Result)(HOL.bool)->Termination_Condition

# Atomic types, i.e. types that cannot be decomposed further and where no meaningful properties are defined for.
atomic_types=Profile;Preference_Relation;HOL.bool;?'a;List.list(?'a);Set.set(?'a);Rel.rel(?'a)

# Additional Properties that have to be assumed to hold for every instance of the corresponding type.
# Hopefully, this will be a temporary fix.
additional_properties=linear_order(Preference_Relation);trans(Preference_Relation);finite_profile(Set.set(?'a),Profile)



