## External executables

ISABELLE_EXECUTABLE=isabelle

GCC_EXECUTABLE=gcc

SWI_PROLOG_EXECUTABLE=swipl
## Path to libswipl.so
SWI_PROLOG_LIBSWIPL_PATH=
## Path to the SWI-Prolog library (usually $SWI_HOME_DIR/lib/$ARCHITECTURE, should contain libjpl.so, if it does not, install swi-prolog-java)
SWI_PROLOG_LIBRARIES_PATH=


## System settings
#verbosity_level


## Isabelle settings

# Isabelle tactics to be used by the brute force tactics choice (;-separated list).
ISABELLE_TACTICS=simp;blast;metis;fastforce

ISABELLE_PATH_TO_ROOT_FILE=src/test/resources/verifiedVotingRuleConstruction/theories/ROOT
ISABELLE_SESSION_NAME=Verified_Voting_Rule_Construction
#default_path_for_generated_theories=


## Voting-specific settings

# Type synonyms defined in Isabelle (;-separated list of signature->abbreviation pairs)
SESSION_SPECIFIC_TYPE_SYNONYMS=Set.set(Product_Type.prod(?\'a)(?\'a))->Preference_Relation;\
  List.list(Preference_Relation)->Profile;\
  Product_Type.prod(Set.set(?\'a))(Product_Type.prod(Set.set(?\'a))(Set.set(?\'a)))->Result;\
  fun(Set.set(?\'a))(fun(Profile)(Result))->Electoral_Module;\
  fun(Set.set(?\'a))(fun(Result)(fun(Result)(Result)))->Aggregator;\
  fun(?\'a)(fun(Set.set(?\'a))(fun(Profile)(Nat.nat)))->Evaluation_Function;\
  fun(Result)(HOL.bool)->Termination_Condition

# Atomic types, i.e. types that cannot be decomposed further and where no meaningful properties are defined for.
SESSION_SPECIFIC_ATOMIC_TYPES=Profile;\
  Preference_Relation;\
  HOL.bool;\
  ?'a;\
  List.list(?'a);\
  Set.set(?'a);\
  Rel.rel(?'a)

# Additional Properties that have to be assumed to hold for every instance of the corresponding type.
# Hopefully, this will be a temporary fix.
SESSION_SPECIFIC_ASSUMPTIONS=linear_order(Preference_Relation);\
  trans(Preference_Relation);\
  finite_profile(Set.set(?'a),Profile)



