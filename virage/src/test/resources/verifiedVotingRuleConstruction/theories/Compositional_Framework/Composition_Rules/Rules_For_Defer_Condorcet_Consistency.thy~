theory Rules_For_Defer_Condorcet_Consistency
  imports "../Properties/Defer_Condorcet_Consistency"
          "../Properties/Defer_Deciding"
          "../Properties/Condorcet_Compatibility"
          "../Components/Composites/Condorcet_Module"
          "../Components/Composites/Minimax_Module"
          Rules_For_Defers_Only_Winner
          Rules_For_Condorcet_Maximum
          Rules_For_Condorcet_Rating

begin

theorem ccomp_and_dd_imp_dcc[simp]:
  assumes ccomp: "condorcet_compatibility m" and
          dd: "defer_deciding m"
  shows "defer_condorcet_consistency m"
proof (unfold defer_condorcet_consistency_def, auto)
  show "electoral_module m"
    using dd defer_deciding_def
    by metis
next
  fix
    A :: "'a set" and
    p :: "'a Profile" and
    w :: "'a"
  assume
    prof_A: "profile A p" and
    w_in_A: "w ∈ A" and
    finiteness: "finite A" and
    assm: "∀x∈A - {w}.
          card {i. i < length p ∧ (w, x) ∈ (p!i)} <
            card {i. i < length p ∧ (x, w) ∈ (p!i)}"
  have winner: "condorcet_winner A p w"
    using assm finiteness prof_A w_in_A
    by simp
  hence
    "m A p =
      ({},
        A - defer m A p,
        {d ∈ A. condorcet_winner A p d})"
  proof -
    (*Elect*)
    from dd have 0:
      "elect m A p = {}"
      using defer_deciding_def non_electing_def
            winner
      by fastforce
    (*Defers*)
    from dd ccomp have 1: "defer m A p = {w}"
      using ccomp_and_dd_imp_def_only_winner winner
      by simp
    (*Reject*)
    from 0 1 have 2: "reject m A p = A - defer m A p"
      using Diff_empty dd defer_deciding_def
            reject_not_elec_or_def winner
      by fastforce
    from 0 1 2 have 3: "m A p = ({}, A - defer m A p, {w})"
      using combine_ele_rej_def
      by metis
    have "{w} = {d ∈ A. condorcet_winner A p d}"
      using cond_winner_unique3 winner
      by metis
    thus ?thesis
      using "3"
      by auto
  qed
  hence
    "m A p =
      ({},
        A - defer m A p,
        {d ∈ A. ∀x∈A - {d}. wins d p x})"
    using finiteness prof_A winner Collect_cong
    by auto
  hence
    "m A p =
        ({},
          A - defer m A p,
          {d ∈ A. ∀x∈A - {d}.
            prefer_count p x d < prefer_count p d x})"
    by simp
  hence
    "m A p =
        ({},
          A - defer m A p,
          {d ∈ A. ∀x∈A - {d}.
            card {i. i < length p ∧ (let r = (p!i) in (d ≼⇩r x))} <
                card {i. i < length p ∧ (let r = (p!i) in (x ≼⇩r d))}})"
    by simp
  thus
    "m A p =
        ({},
          A - defer m A p,
          {d ∈ A. ∀x∈A - {d}.
            card {i. i < length p ∧ (d, x) ∈ (p!i)} <
              card {i. i < length p ∧ (x, d) ∈ (p!i)}})"
    by simp
qed

lemma cr_eval_imp_dcc_max_elim_helper1:
  assumes
    f_prof: "finite_profile A p" and
    rating: "condorcet_rating e" and
    winner: "condorcet_winner A p w"
  shows "elimination_set e (Max {e x A p | x. x ∈ A}) (<) A p = A - {w}"
proof (safe, simp_all, safe)
  assume
    w_in_A: "w ∈ A" and
    max: "e w A p < Max {e x A p |x. x ∈ A}"
  show "False"
    using cond_winner_imp_max_eval_val
          rating winner f_prof max
    by fastforce
next
  fix
    x :: "'a"
  assume
    x_in_A: "x ∈ A" and
    not_max: "¬ e x A p < Max {e y A p |y. y ∈ A}"
  show "x = w"
    using non_cond_winner_not_max_eval x_in_A
          rating winner f_prof not_max
    by (metis (mono_tags, lifting))
qed

(*
  If the used evaluation function is Condorcet rating, max-eliminator
  is defer-Condorcet-consistent.
*)
theorem cr_eval_imp_dcc_max_elim[simp]:
  assumes rating: "condorcet_rating e"
  shows "defer_condorcet_consistency (max_eliminator e)"
  unfolding defer_condorcet_consistency_def
proof (safe, simp)
  fix
    A :: "'a set" and
    p :: "'a Profile" and
    w :: "'a"
  assume
    winner: "condorcet_winner A p w" and
    finite: "finite A"
  let ?trsh = "(Max {e y A p | y. y ∈ A})"
  show
    "max_eliminator e A p =
      ({},
        A - defer (max_eliminator e) A p,
        {a ∈ A. condorcet_winner A p a})"
  proof (cases "elimination_set e (?trsh) (<) A p ≠ A")
    case True
    have profile: "finite_profile A p"
      using winner
      by simp
    with rating winner have 0:
      "(elimination_set e ?trsh (<) A p) = A - {w}"
      using cr_eval_imp_dcc_max_elim_helper1
      by (metis (mono_tags, lifting))
    have
      "max_eliminator e A p =
        ({},
          (elimination_set e ?trsh (<) A p),
          A - (elimination_set e ?trsh (<) A p))"
      using True
      by simp
    also have "... = ({}, A - {w}, A - (A - {w}))"
      using "0"
      by presburger
    also have "... = ({}, A - {w}, {w})"
      using winner
      by auto
    also have "... = ({},A - defer (max_eliminator e) A p, {w})"
      using calculation
      by auto
    also have
      "... =
        ({},
          A - defer (max_eliminator e) A p,
          {d ∈ A. condorcet_winner A p d})"
      using cond_winner_unique3 winner Collect_cong
      by (metis (no_types, lifting))
    finally show ?thesis
      using finite winner
      by metis
  next
    case False
    thus ?thesis
    proof -
      have f1:
        "finite A ∧ profile A p ∧ w ∈ A ∧ (∀a. a ∉ A - {w} ∨ wins w p a)"
        using winner
        by auto
      hence
        "?trsh = e w A p"
        using rating winner
        by (simp add: cond_winner_imp_max_eval_val)
      hence False
        using f1 False
        by auto
      thus ?thesis
        by simp
    qed
  qed
qed

theorem condorcet_is_dcc: "defer_condorcet_consistency condorcet"
proof -
  have max_cscore_dcc:
    "defer_condorcet_consistency (max_eliminator condorcet_score)"
    using cr_eval_imp_dcc_max_elim
    by (simp add: condorcet_score_is_condorcet_rating)
  have cond_eq_max_cond:
    "⋀A p. (condorcet A p ≡ max_eliminator condorcet_score A p)"
    by simp
  from max_cscore_dcc cond_eq_max_cond show ?thesis
    unfolding defer_condorcet_consistency_def electoral_module_def
    by (smt (verit, ccfv_threshold))
qed

theorem copeland_is_dcc: "defer_condorcet_consistency copeland"
proof -
  have max_cplscore_dcc:
    "defer_condorcet_consistency (max_eliminator copeland_score)"
    using cr_eval_imp_dcc_max_elim
    by (simp add: copeland_score_is_cr)
  have copel_eq_max_copel:
    "⋀A p. (copeland A p ≡ max_eliminator copeland_score A p)"
    by simp
  from max_cplscore_dcc copel_eq_max_copel
  show ?thesis
    unfolding defer_condorcet_consistency_def electoral_module_def
    by (smt (verit, ccfv_threshold))
qed


theorem minimax_is_dcc: "defer_condorcet_consistency minimax"
proof -
  have max_mmaxscore_dcc:
    "defer_condorcet_consistency (max_eliminator minimax_score)"
    using cr_eval_imp_dcc_max_elim
    by (simp add: minimax_score_cond_rating)
  have mmax_eq_max_mmax:
    "⋀A p. (minimax A p ≡ max_eliminator minimax_score A p)"
    by simp
  from max_mmaxscore_dcc mmax_eq_max_mmax
  show ?thesis
    unfolding defer_condorcet_consistency_def electoral_module_def
    by (smt (verit, ccfv_threshold))
qed

end